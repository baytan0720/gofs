// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: PipelineToClient.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PipelineToClientServiceClient is the client API for PipelineToClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineToClientServiceClient interface {
	PipelineToClient(ctx context.Context, in *PipelineToClientArgs, opts ...grpc.CallOption) (*PipelineToClientReply, error)
}

type pipelineToClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineToClientServiceClient(cc grpc.ClientConnInterface) PipelineToClientServiceClient {
	return &pipelineToClientServiceClient{cc}
}

func (c *pipelineToClientServiceClient) PipelineToClient(ctx context.Context, in *PipelineToClientArgs, opts ...grpc.CallOption) (*PipelineToClientReply, error) {
	out := new(PipelineToClientReply)
	err := c.cc.Invoke(ctx, "/pb.PipelineToClientService/PipelineToClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineToClientServiceServer is the server API for PipelineToClientService service.
// All implementations must embed UnimplementedPipelineToClientServiceServer
// for forward compatibility
type PipelineToClientServiceServer interface {
	PipelineToClient(context.Context, *PipelineToClientArgs) (*PipelineToClientReply, error)
	mustEmbedUnimplementedPipelineToClientServiceServer()
}

// UnimplementedPipelineToClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPipelineToClientServiceServer struct {
}

func (UnimplementedPipelineToClientServiceServer) PipelineToClient(context.Context, *PipelineToClientArgs) (*PipelineToClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PipelineToClient not implemented")
}
func (UnimplementedPipelineToClientServiceServer) mustEmbedUnimplementedPipelineToClientServiceServer() {
}

// UnsafePipelineToClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineToClientServiceServer will
// result in compilation errors.
type UnsafePipelineToClientServiceServer interface {
	mustEmbedUnimplementedPipelineToClientServiceServer()
}

func RegisterPipelineToClientServiceServer(s grpc.ServiceRegistrar, srv PipelineToClientServiceServer) {
	s.RegisterService(&PipelineToClientService_ServiceDesc, srv)
}

func _PipelineToClientService_PipelineToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineToClientArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineToClientServiceServer).PipelineToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PipelineToClientService/PipelineToClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineToClientServiceServer).PipelineToClient(ctx, req.(*PipelineToClientArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelineToClientService_ServiceDesc is the grpc.ServiceDesc for PipelineToClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineToClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PipelineToClientService",
	HandlerType: (*PipelineToClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PipelineToClient",
			Handler:    _PipelineToClientService_PipelineToClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PipelineToClient.proto",
}
