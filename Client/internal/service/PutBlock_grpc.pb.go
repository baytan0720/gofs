// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: PutBlock.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PutBlockServiceClient is the client API for PutBlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PutBlockServiceClient interface {
	PutBlock(ctx context.Context, in *PutBlockArgs, opts ...grpc.CallOption) (*PutBlockReply, error)
}

type putBlockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPutBlockServiceClient(cc grpc.ClientConnInterface) PutBlockServiceClient {
	return &putBlockServiceClient{cc}
}

func (c *putBlockServiceClient) PutBlock(ctx context.Context, in *PutBlockArgs, opts ...grpc.CallOption) (*PutBlockReply, error) {
	out := new(PutBlockReply)
	err := c.cc.Invoke(ctx, "/pb.PutBlockService/PutBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PutBlockServiceServer is the server API for PutBlockService service.
// All implementations must embed UnimplementedPutBlockServiceServer
// for forward compatibility
type PutBlockServiceServer interface {
	PutBlock(context.Context, *PutBlockArgs) (*PutBlockReply, error)
	mustEmbedUnimplementedPutBlockServiceServer()
}

// UnimplementedPutBlockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPutBlockServiceServer struct {
}

func (UnimplementedPutBlockServiceServer) PutBlock(context.Context, *PutBlockArgs) (*PutBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBlock not implemented")
}
func (UnimplementedPutBlockServiceServer) mustEmbedUnimplementedPutBlockServiceServer() {}

// UnsafePutBlockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PutBlockServiceServer will
// result in compilation errors.
type UnsafePutBlockServiceServer interface {
	mustEmbedUnimplementedPutBlockServiceServer()
}

func RegisterPutBlockServiceServer(s grpc.ServiceRegistrar, srv PutBlockServiceServer) {
	s.RegisterService(&PutBlockService_ServiceDesc, srv)
}

func _PutBlockService_PutBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBlockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutBlockServiceServer).PutBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PutBlockService/PutBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutBlockServiceServer).PutBlock(ctx, req.(*PutBlockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// PutBlockService_ServiceDesc is the grpc.ServiceDesc for PutBlockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PutBlockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PutBlockService",
	HandlerType: (*PutBlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutBlock",
			Handler:    _PutBlockService_PutBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PutBlock.proto",
}
