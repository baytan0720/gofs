// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: datanode.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	WriteBlock(ctx context.Context, in *WriteBlockArgs, opts ...grpc.CallOption) (*WriteBlockReply, error)
	ReadBlock(ctx context.Context, in *ReadBlockArgs, opts ...grpc.CallOption) (*ReadBlockReply, error)
	GetBlockInfo(ctx context.Context, in *GetBlockInfoArgs, opts ...grpc.CallOption) (*GetBlockInfoReply, error)
	CreatePipeline(ctx context.Context, in *CreatePipelineArgs, opts ...grpc.CallOption) (*CreatePipelineReply, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) WriteBlock(ctx context.Context, in *WriteBlockArgs, opts ...grpc.CallOption) (*WriteBlockReply, error) {
	out := new(WriteBlockReply)
	err := c.cc.Invoke(ctx, "/service.DataNodeService/WriteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) ReadBlock(ctx context.Context, in *ReadBlockArgs, opts ...grpc.CallOption) (*ReadBlockReply, error) {
	out := new(ReadBlockReply)
	err := c.cc.Invoke(ctx, "/service.DataNodeService/ReadBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) GetBlockInfo(ctx context.Context, in *GetBlockInfoArgs, opts ...grpc.CallOption) (*GetBlockInfoReply, error) {
	out := new(GetBlockInfoReply)
	err := c.cc.Invoke(ctx, "/service.DataNodeService/GetBlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) CreatePipeline(ctx context.Context, in *CreatePipelineArgs, opts ...grpc.CallOption) (*CreatePipelineReply, error) {
	out := new(CreatePipelineReply)
	err := c.cc.Invoke(ctx, "/service.DataNodeService/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility
type DataNodeServiceServer interface {
	WriteBlock(context.Context, *WriteBlockArgs) (*WriteBlockReply, error)
	ReadBlock(context.Context, *ReadBlockArgs) (*ReadBlockReply, error)
	GetBlockInfo(context.Context, *GetBlockInfoArgs) (*GetBlockInfoReply, error)
	CreatePipeline(context.Context, *CreatePipelineArgs) (*CreatePipelineReply, error)
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServiceServer struct {
}

func (UnimplementedDataNodeServiceServer) WriteBlock(context.Context, *WriteBlockArgs) (*WriteBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBlock not implemented")
}
func (UnimplementedDataNodeServiceServer) ReadBlock(context.Context, *ReadBlockArgs) (*ReadBlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBlock not implemented")
}
func (UnimplementedDataNodeServiceServer) GetBlockInfo(context.Context, *GetBlockInfoArgs) (*GetBlockInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockInfo not implemented")
}
func (UnimplementedDataNodeServiceServer) CreatePipeline(context.Context, *CreatePipelineArgs) (*CreatePipelineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s grpc.ServiceRegistrar, srv DataNodeServiceServer) {
	s.RegisterService(&DataNodeService_ServiceDesc, srv)
}

func _DataNodeService_WriteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBlockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).WriteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DataNodeService/WriteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).WriteBlock(ctx, req.(*WriteBlockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_ReadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBlockArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).ReadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DataNodeService/ReadBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).ReadBlock(ctx, req.(*ReadBlockArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_GetBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).GetBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DataNodeService/GetBlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).GetBlockInfo(ctx, req.(*GetBlockInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.DataNodeService/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).CreatePipeline(ctx, req.(*CreatePipelineArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNodeService_ServiceDesc is the grpc.ServiceDesc for DataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteBlock",
			Handler:    _DataNodeService_WriteBlock_Handler,
		},
		{
			MethodName: "ReadBlock",
			Handler:    _DataNodeService_ReadBlock_Handler,
		},
		{
			MethodName: "GetBlockInfo",
			Handler:    _DataNodeService_GetBlockInfo_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _DataNodeService_CreatePipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datanode.proto",
}
