// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: namenode.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32          `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Addr      string         `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Port      string         `protobuf:"bytes,3,opt,name=Port,proto3" json:"Port,omitempty"`
	StartTime string         `protobuf:"bytes,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	Status    DataNodeStatus `protobuf:"varint,5,opt,name=Status,proto3,enum=service.DataNodeStatus" json:"Status,omitempty"`
	DiskQuota int64          `protobuf:"varint,6,opt,name=DiskQuota,proto3" json:"DiskQuota,omitempty"`
	UsedDisk  int64          `protobuf:"varint,7,opt,name=UsedDisk,proto3" json:"UsedDisk,omitempty"`
	BlockNum  int32          `protobuf:"varint,8,opt,name=BlockNum,proto3" json:"BlockNum,omitempty"`
	Blocks    []*BlockInfo   `protobuf:"bytes,9,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *DataNodeInfo) Reset() {
	*x = DataNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNodeInfo) ProtoMessage() {}

func (x *DataNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNodeInfo.ProtoReflect.Descriptor instead.
func (*DataNodeInfo) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{0}
}

func (x *DataNodeInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DataNodeInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *DataNodeInfo) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *DataNodeInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DataNodeInfo) GetStatus() DataNodeStatus {
	if x != nil {
		return x.Status
	}
	return DataNodeStatus_dActive
}

func (x *DataNodeInfo) GetDiskQuota() int64 {
	if x != nil {
		return x.DiskQuota
	}
	return 0
}

func (x *DataNodeInfo) GetUsedDisk() int64 {
	if x != nil {
		return x.UsedDisk
	}
	return 0
}

func (x *DataNodeInfo) GetBlockNum() int32 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *DataNodeInfo) GetBlocks() []*BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type SimDataNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Port string `protobuf:"bytes,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *SimDataNodeInfo) Reset() {
	*x = SimDataNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimDataNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimDataNodeInfo) ProtoMessage() {}

func (x *SimDataNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimDataNodeInfo.ProtoReflect.Descriptor instead.
func (*SimDataNodeInfo) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{1}
}

func (x *SimDataNodeInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SimDataNodeInfo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SimDataNodeInfo) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType FileStatus `protobuf:"varint,1,opt,name=FileType,proto3,enum=service.FileStatus" json:"FileType,omitempty"`
	Size     int64      `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Modtime  string     `protobuf:"bytes,3,opt,name=modtime,proto3" json:"modtime,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{2}
}

func (x *FileInfo) GetFileType() FileStatus {
	if x != nil {
		return x.FileType
	}
	return FileStatus_fPathFound
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetModtime() string {
	if x != nil {
		return x.Modtime
	}
	return ""
}

type RegisterArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DataNodeInfo `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *RegisterArgs) Reset() {
	*x = RegisterArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArgs) ProtoMessage() {}

func (x *RegisterArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArgs.ProtoReflect.Descriptor instead.
func (*RegisterArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterArgs) GetInfo() *DataNodeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	Id     int32      `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *RegisterReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HeartBeatArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *HeartBeatArgs) Reset() {
	*x = HeartBeatArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatArgs) ProtoMessage() {}

func (x *HeartBeatArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatArgs.ProtoReflect.Descriptor instead.
func (*HeartBeatArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{5}
}

func (x *HeartBeatArgs) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HeartBeatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	CleanBlockId []string   `protobuf:"bytes,2,rep,name=CleanBlockId,proto3" json:"CleanBlockId,omitempty"`
}

func (x *HeartBeatReply) Reset() {
	*x = HeartBeatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatReply) ProtoMessage() {}

func (x *HeartBeatReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatReply.ProtoReflect.Descriptor instead.
func (*HeartBeatReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{6}
}

func (x *HeartBeatReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *HeartBeatReply) GetCleanBlockId() []string {
	if x != nil {
		return x.CleanBlockId
	}
	return nil
}

type BlockReportArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Blocks []*BlockInfo `protobuf:"bytes,2,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *BlockReportArgs) Reset() {
	*x = BlockReportArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReportArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReportArgs) ProtoMessage() {}

func (x *BlockReportArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReportArgs.ProtoReflect.Descriptor instead.
func (*BlockReportArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{7}
}

func (x *BlockReportArgs) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlockReportArgs) GetBlocks() []*BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type BlockReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
}

func (x *BlockReportReply) Reset() {
	*x = BlockReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReportReply) ProtoMessage() {}

func (x *BlockReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReportReply.ProtoReflect.Descriptor instead.
func (*BlockReportReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{8}
}

func (x *BlockReportReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

type NewBlockReportArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	EntryId int64      `protobuf:"varint,2,opt,name=EntryId,proto3" json:"EntryId,omitempty"`
	Block   *BlockInfo `protobuf:"bytes,3,opt,name=Block,proto3" json:"Block,omitempty"`
}

func (x *NewBlockReportArgs) Reset() {
	*x = NewBlockReportArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockReportArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockReportArgs) ProtoMessage() {}

func (x *NewBlockReportArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockReportArgs.ProtoReflect.Descriptor instead.
func (*NewBlockReportArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{9}
}

func (x *NewBlockReportArgs) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewBlockReportArgs) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *NewBlockReportArgs) GetBlock() *BlockInfo {
	if x != nil {
		return x.Block
	}
	return nil
}

type NewBlockReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
}

func (x *NewBlockReportReply) Reset() {
	*x = NewBlockReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockReportReply) ProtoMessage() {}

func (x *NewBlockReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockReportReply.ProtoReflect.Descriptor instead.
func (*NewBlockReportReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{10}
}

func (x *NewBlockReportReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

type GetSystemInfoArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSystemInfoArgs) Reset() {
	*x = GetSystemInfoArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemInfoArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoArgs) ProtoMessage() {}

func (x *GetSystemInfoArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoArgs.ProtoReflect.Descriptor instead.
func (*GetSystemInfoArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{11}
}

type GetSystemInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NnStatus       NameNodeStatus  `protobuf:"varint,1,opt,name=NnStatus,proto3,enum=service.NameNodeStatus" json:"NnStatus,omitempty"`
	ReplicaNum     int32           `protobuf:"varint,2,opt,name=ReplicaNum,proto3" json:"ReplicaNum,omitempty"`
	BlockSize      int64           `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	TotalDiskQuota int64           `protobuf:"varint,4,opt,name=TotalDiskQuota,proto3" json:"TotalDiskQuota,omitempty"`
	UsedDisk       int64           `protobuf:"varint,5,opt,name=UsedDisk,proto3" json:"UsedDisk,omitempty"`
	DataNodes      []*DataNodeInfo `protobuf:"bytes,6,rep,name=DataNodes,proto3" json:"DataNodes,omitempty"`
}

func (x *GetSystemInfoReply) Reset() {
	*x = GetSystemInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoReply) ProtoMessage() {}

func (x *GetSystemInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoReply.ProtoReflect.Descriptor instead.
func (*GetSystemInfoReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{12}
}

func (x *GetSystemInfoReply) GetNnStatus() NameNodeStatus {
	if x != nil {
		return x.NnStatus
	}
	return NameNodeStatus_nSafeMode
}

func (x *GetSystemInfoReply) GetReplicaNum() int32 {
	if x != nil {
		return x.ReplicaNum
	}
	return 0
}

func (x *GetSystemInfoReply) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *GetSystemInfoReply) GetTotalDiskQuota() int64 {
	if x != nil {
		return x.TotalDiskQuota
	}
	return 0
}

func (x *GetSystemInfoReply) GetUsedDisk() int64 {
	if x != nil {
		return x.UsedDisk
	}
	return 0
}

func (x *GetSystemInfoReply) GetDataNodes() []*DataNodeInfo {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

type PutFileArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileSize int64  `protobuf:"varint,3,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
}

func (x *PutFileArgs) Reset() {
	*x = PutFileArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutFileArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFileArgs) ProtoMessage() {}

func (x *PutFileArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFileArgs.ProtoReflect.Descriptor instead.
func (*PutFileArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{13}
}

func (x *PutFileArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PutFileArgs) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PutFileArgs) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

type PutFileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	FileStatus FileStatus `protobuf:"varint,2,opt,name=FileStatus,proto3,enum=service.FileStatus" json:"FileStatus,omitempty"`
	BlockSize  int64      `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	EntryId    int64      `protobuf:"varint,4,opt,name=EntryId,proto3" json:"EntryId,omitempty"`
	BlockId    []string   `protobuf:"bytes,5,rep,name=BlockId,proto3" json:"BlockId,omitempty"`
}

func (x *PutFileReply) Reset() {
	*x = PutFileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutFileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFileReply) ProtoMessage() {}

func (x *PutFileReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFileReply.ProtoReflect.Descriptor instead.
func (*PutFileReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{14}
}

func (x *PutFileReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *PutFileReply) GetFileStatus() FileStatus {
	if x != nil {
		return x.FileStatus
	}
	return FileStatus_fPathFound
}

func (x *PutFileReply) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *PutFileReply) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *PutFileReply) GetBlockId() []string {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type PutBlockArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId   int64  `protobuf:"varint,1,opt,name=EntryId,proto3" json:"EntryId,omitempty"`
	BlockId   string `protobuf:"bytes,2,opt,name=BlockId,proto3" json:"BlockId,omitempty"`
	BlockSize int64  `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
}

func (x *PutBlockArgs) Reset() {
	*x = PutBlockArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBlockArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBlockArgs) ProtoMessage() {}

func (x *PutBlockArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBlockArgs.ProtoReflect.Descriptor instead.
func (*PutBlockArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{15}
}

func (x *PutBlockArgs) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *PutBlockArgs) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *PutBlockArgs) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

type PutBlockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    StatusCode         `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	DataNodes []*SimDataNodeInfo `protobuf:"bytes,2,rep,name=DataNodes,proto3" json:"DataNodes,omitempty"`
}

func (x *PutBlockReply) Reset() {
	*x = PutBlockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBlockReply) ProtoMessage() {}

func (x *PutBlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBlockReply.ProtoReflect.Descriptor instead.
func (*PutBlockReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{16}
}

func (x *PutBlockReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *PutBlockReply) GetDataNodes() []*SimDataNodeInfo {
	if x != nil {
		return x.DataNodes
	}
	return nil
}

type MkdirArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	DirName string `protobuf:"bytes,2,opt,name=DirName,proto3" json:"DirName,omitempty"`
}

func (x *MkdirArgs) Reset() {
	*x = MkdirArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirArgs) ProtoMessage() {}

func (x *MkdirArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirArgs.ProtoReflect.Descriptor instead.
func (*MkdirArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{17}
}

func (x *MkdirArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MkdirArgs) GetDirName() string {
	if x != nil {
		return x.DirName
	}
	return ""
}

type MkdirReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	FileStatus FileStatus `protobuf:"varint,2,opt,name=FileStatus,proto3,enum=service.FileStatus" json:"FileStatus,omitempty"`
}

func (x *MkdirReply) Reset() {
	*x = MkdirReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MkdirReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirReply) ProtoMessage() {}

func (x *MkdirReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirReply.ProtoReflect.Descriptor instead.
func (*MkdirReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{18}
}

func (x *MkdirReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *MkdirReply) GetFileStatus() FileStatus {
	if x != nil {
		return x.FileStatus
	}
	return FileStatus_fPathFound
}

type ListArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *ListArgs) Reset() {
	*x = ListArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArgs) ProtoMessage() {}

func (x *ListArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArgs.ProtoReflect.Descriptor instead.
func (*ListArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{19}
}

func (x *ListArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	FileStatus FileStatus `protobuf:"varint,2,opt,name=FileStatus,proto3,enum=service.FileStatus" json:"FileStatus,omitempty"`
	Files      []string   `protobuf:"bytes,3,rep,name=Files,proto3" json:"Files,omitempty"`
}

func (x *ListReply) Reset() {
	*x = ListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReply) ProtoMessage() {}

func (x *ListReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReply.ProtoReflect.Descriptor instead.
func (*ListReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{20}
}

func (x *ListReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *ListReply) GetFileStatus() FileStatus {
	if x != nil {
		return x.FileStatus
	}
	return FileStatus_fPathFound
}

func (x *ListReply) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type RenameArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=NewName,proto3" json:"NewName,omitempty"`
}

func (x *RenameArgs) Reset() {
	*x = RenameArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameArgs) ProtoMessage() {}

func (x *RenameArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameArgs.ProtoReflect.Descriptor instead.
func (*RenameArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{21}
}

func (x *RenameArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RenameArgs) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type RenameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	FileStatus FileStatus `protobuf:"varint,2,opt,name=FileStatus,proto3,enum=service.FileStatus" json:"FileStatus,omitempty"`
}

func (x *RenameReply) Reset() {
	*x = RenameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameReply) ProtoMessage() {}

func (x *RenameReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameReply.ProtoReflect.Descriptor instead.
func (*RenameReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{22}
}

func (x *RenameReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *RenameReply) GetFileStatus() FileStatus {
	if x != nil {
		return x.FileStatus
	}
	return FileStatus_fPathFound
}

type DeleteArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *DeleteArgs) Reset() {
	*x = DeleteArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArgs) ProtoMessage() {}

func (x *DeleteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArgs.ProtoReflect.Descriptor instead.
func (*DeleteArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	FileStatus FileStatus `protobuf:"varint,2,opt,name=FileStatus,proto3,enum=service.FileStatus" json:"FileStatus,omitempty"`
}

func (x *DeleteReply) Reset() {
	*x = DeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReply) ProtoMessage() {}

func (x *DeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReply.ProtoReflect.Descriptor instead.
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *DeleteReply) GetFileStatus() FileStatus {
	if x != nil {
		return x.FileStatus
	}
	return FileStatus_fPathFound
}

type StatArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *StatArgs) Reset() {
	*x = StatArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatArgs) ProtoMessage() {}

func (x *StatArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatArgs.ProtoReflect.Descriptor instead.
func (*StatArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{25}
}

func (x *StatArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type StatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     StatusCode `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	FileStatus FileStatus `protobuf:"varint,2,opt,name=FileStatus,proto3,enum=service.FileStatus" json:"FileStatus,omitempty"`
	Info       *FileInfo  `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *StatReply) Reset() {
	*x = StatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatReply) ProtoMessage() {}

func (x *StatReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatReply.ProtoReflect.Descriptor instead.
func (*StatReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{26}
}

func (x *StatReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *StatReply) GetFileStatus() FileStatus {
	if x != nil {
		return x.FileStatus
	}
	return FileStatus_fPathFound
}

func (x *StatReply) GetInfo() *FileInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetLeaseArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLeaseArgs) Reset() {
	*x = GetLeaseArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaseArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaseArgs) ProtoMessage() {}

func (x *GetLeaseArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaseArgs.ProtoReflect.Descriptor instead.
func (*GetLeaseArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{27}
}

type GetLeaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         StatusCode     `protobuf:"varint,1,opt,name=Status,proto3,enum=service.StatusCode" json:"Status,omitempty"`
	NameNodeStatus NameNodeStatus `protobuf:"varint,2,opt,name=NameNodeStatus,proto3,enum=service.NameNodeStatus" json:"NameNodeStatus,omitempty"`
}

func (x *GetLeaseReply) Reset() {
	*x = GetLeaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaseReply) ProtoMessage() {}

func (x *GetLeaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaseReply.ProtoReflect.Descriptor instead.
func (*GetLeaseReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{28}
}

func (x *GetLeaseReply) GetStatus() StatusCode {
	if x != nil {
		return x.Status
	}
	return StatusCode_OK
}

func (x *GetLeaseReply) GetNameNodeStatus() NameNodeStatus {
	if x != nil {
		return x.NameNodeStatus
	}
	return NameNodeStatus_nSafeMode
}

type RenewLeaseArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RenewLeaseArgs) Reset() {
	*x = RenewLeaseArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewLeaseArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewLeaseArgs) ProtoMessage() {}

func (x *RenewLeaseArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewLeaseArgs.ProtoReflect.Descriptor instead.
func (*RenewLeaseArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{29}
}

type RenewLeaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RenewLeaseReply) Reset() {
	*x = RenewLeaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewLeaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewLeaseReply) ProtoMessage() {}

func (x *RenewLeaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewLeaseReply.ProtoReflect.Descriptor instead.
func (*RenewLeaseReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{30}
}

type ReleaseLeaseArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId int64 `protobuf:"varint,1,opt,name=EntryId,proto3" json:"EntryId,omitempty"`
}

func (x *ReleaseLeaseArgs) Reset() {
	*x = ReleaseLeaseArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseLeaseArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLeaseArgs) ProtoMessage() {}

func (x *ReleaseLeaseArgs) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLeaseArgs.ProtoReflect.Descriptor instead.
func (*ReleaseLeaseArgs) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{31}
}

func (x *ReleaseLeaseArgs) GetEntryId() int64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

type ReleaseLeaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseLeaseReply) Reset() {
	*x = ReleaseLeaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_namenode_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseLeaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseLeaseReply) ProtoMessage() {}

func (x *ReleaseLeaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_namenode_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseLeaseReply.ProtoReflect.Descriptor instead.
func (*ReleaseLeaseReply) Descriptor() ([]byte, []int) {
	return file_namenode_proto_rawDescGZIP(), []int{32}
}

var File_namenode_proto protoreflect.FileDescriptor

var file_namenode_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x69, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x6f, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x22, 0x61, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0x3f, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x42, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x33, 0x0a, 0x08, 0x4e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x4e, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x0b, 0x50,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0c, 0x50,
	0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x74, 0x0a,
	0x0d, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6e,
	0x0a, 0x0a, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1e,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x83,
	0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x6f, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x20, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x6f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x22, 0x7d, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x4e, 0x61, 0x6d,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x4e, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x22, 0x11, 0x0a, 0x0f,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x2c, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x13, 0x0a,
	0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x32, 0x95, 0x07, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x3c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x42, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x50, 0x75,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33,
	0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x12, 0x5a, 0x10, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_namenode_proto_rawDescOnce sync.Once
	file_namenode_proto_rawDescData = file_namenode_proto_rawDesc
)

func file_namenode_proto_rawDescGZIP() []byte {
	file_namenode_proto_rawDescOnce.Do(func() {
		file_namenode_proto_rawDescData = protoimpl.X.CompressGZIP(file_namenode_proto_rawDescData)
	})
	return file_namenode_proto_rawDescData
}

var file_namenode_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_namenode_proto_goTypes = []interface{}{
	(*DataNodeInfo)(nil),        // 0: service.DataNodeInfo
	(*SimDataNodeInfo)(nil),     // 1: service.SimDataNodeInfo
	(*FileInfo)(nil),            // 2: service.FileInfo
	(*RegisterArgs)(nil),        // 3: service.RegisterArgs
	(*RegisterReply)(nil),       // 4: service.RegisterReply
	(*HeartBeatArgs)(nil),       // 5: service.HeartBeatArgs
	(*HeartBeatReply)(nil),      // 6: service.HeartBeatReply
	(*BlockReportArgs)(nil),     // 7: service.BlockReportArgs
	(*BlockReportReply)(nil),    // 8: service.BlockReportReply
	(*NewBlockReportArgs)(nil),  // 9: service.NewBlockReportArgs
	(*NewBlockReportReply)(nil), // 10: service.NewBlockReportReply
	(*GetSystemInfoArgs)(nil),   // 11: service.GetSystemInfoArgs
	(*GetSystemInfoReply)(nil),  // 12: service.GetSystemInfoReply
	(*PutFileArgs)(nil),         // 13: service.PutFileArgs
	(*PutFileReply)(nil),        // 14: service.PutFileReply
	(*PutBlockArgs)(nil),        // 15: service.PutBlockArgs
	(*PutBlockReply)(nil),       // 16: service.PutBlockReply
	(*MkdirArgs)(nil),           // 17: service.MkdirArgs
	(*MkdirReply)(nil),          // 18: service.MkdirReply
	(*ListArgs)(nil),            // 19: service.ListArgs
	(*ListReply)(nil),           // 20: service.ListReply
	(*RenameArgs)(nil),          // 21: service.RenameArgs
	(*RenameReply)(nil),         // 22: service.RenameReply
	(*DeleteArgs)(nil),          // 23: service.DeleteArgs
	(*DeleteReply)(nil),         // 24: service.DeleteReply
	(*StatArgs)(nil),            // 25: service.StatArgs
	(*StatReply)(nil),           // 26: service.StatReply
	(*GetLeaseArgs)(nil),        // 27: service.GetLeaseArgs
	(*GetLeaseReply)(nil),       // 28: service.GetLeaseReply
	(*RenewLeaseArgs)(nil),      // 29: service.RenewLeaseArgs
	(*RenewLeaseReply)(nil),     // 30: service.RenewLeaseReply
	(*ReleaseLeaseArgs)(nil),    // 31: service.ReleaseLeaseArgs
	(*ReleaseLeaseReply)(nil),   // 32: service.ReleaseLeaseReply
	(DataNodeStatus)(0),         // 33: service.DataNodeStatus
	(*BlockInfo)(nil),           // 34: service.BlockInfo
	(FileStatus)(0),             // 35: service.FileStatus
	(StatusCode)(0),             // 36: service.StatusCode
	(NameNodeStatus)(0),         // 37: service.NameNodeStatus
}
var file_namenode_proto_depIdxs = []int32{
	33, // 0: service.DataNodeInfo.Status:type_name -> service.DataNodeStatus
	34, // 1: service.DataNodeInfo.Blocks:type_name -> service.BlockInfo
	35, // 2: service.FileInfo.FileType:type_name -> service.FileStatus
	0,  // 3: service.RegisterArgs.Info:type_name -> service.DataNodeInfo
	36, // 4: service.RegisterReply.Status:type_name -> service.StatusCode
	36, // 5: service.HeartBeatReply.Status:type_name -> service.StatusCode
	34, // 6: service.BlockReportArgs.Blocks:type_name -> service.BlockInfo
	36, // 7: service.BlockReportReply.Status:type_name -> service.StatusCode
	34, // 8: service.NewBlockReportArgs.Block:type_name -> service.BlockInfo
	36, // 9: service.NewBlockReportReply.Status:type_name -> service.StatusCode
	37, // 10: service.GetSystemInfoReply.NnStatus:type_name -> service.NameNodeStatus
	0,  // 11: service.GetSystemInfoReply.DataNodes:type_name -> service.DataNodeInfo
	36, // 12: service.PutFileReply.Status:type_name -> service.StatusCode
	35, // 13: service.PutFileReply.FileStatus:type_name -> service.FileStatus
	36, // 14: service.PutBlockReply.Status:type_name -> service.StatusCode
	1,  // 15: service.PutBlockReply.DataNodes:type_name -> service.SimDataNodeInfo
	36, // 16: service.MkdirReply.Status:type_name -> service.StatusCode
	35, // 17: service.MkdirReply.FileStatus:type_name -> service.FileStatus
	36, // 18: service.ListReply.Status:type_name -> service.StatusCode
	35, // 19: service.ListReply.FileStatus:type_name -> service.FileStatus
	36, // 20: service.RenameReply.Status:type_name -> service.StatusCode
	35, // 21: service.RenameReply.FileStatus:type_name -> service.FileStatus
	36, // 22: service.DeleteReply.Status:type_name -> service.StatusCode
	35, // 23: service.DeleteReply.FileStatus:type_name -> service.FileStatus
	36, // 24: service.StatReply.Status:type_name -> service.StatusCode
	35, // 25: service.StatReply.FileStatus:type_name -> service.FileStatus
	2,  // 26: service.StatReply.Info:type_name -> service.FileInfo
	36, // 27: service.GetLeaseReply.Status:type_name -> service.StatusCode
	37, // 28: service.GetLeaseReply.NameNodeStatus:type_name -> service.NameNodeStatus
	3,  // 29: service.NameNodeService.Register:input_type -> service.RegisterArgs
	5,  // 30: service.NameNodeService.HeartBeat:input_type -> service.HeartBeatArgs
	7,  // 31: service.NameNodeService.BlockReport:input_type -> service.BlockReportArgs
	9,  // 32: service.NameNodeService.NewBlockReport:input_type -> service.NewBlockReportArgs
	11, // 33: service.NameNodeService.GetSystemInfo:input_type -> service.GetSystemInfoArgs
	13, // 34: service.NameNodeService.PutFile:input_type -> service.PutFileArgs
	15, // 35: service.NameNodeService.PutBlock:input_type -> service.PutBlockArgs
	17, // 36: service.NameNodeService.Mkdir:input_type -> service.MkdirArgs
	19, // 37: service.NameNodeService.List:input_type -> service.ListArgs
	21, // 38: service.NameNodeService.Rename:input_type -> service.RenameArgs
	23, // 39: service.NameNodeService.Delete:input_type -> service.DeleteArgs
	25, // 40: service.NameNodeService.Stat:input_type -> service.StatArgs
	27, // 41: service.NameNodeService.GetLease:input_type -> service.GetLeaseArgs
	29, // 42: service.NameNodeService.RenewLease:input_type -> service.RenewLeaseArgs
	31, // 43: service.NameNodeService.ReleaseLease:input_type -> service.ReleaseLeaseArgs
	4,  // 44: service.NameNodeService.Register:output_type -> service.RegisterReply
	6,  // 45: service.NameNodeService.HeartBeat:output_type -> service.HeartBeatReply
	8,  // 46: service.NameNodeService.BlockReport:output_type -> service.BlockReportReply
	10, // 47: service.NameNodeService.NewBlockReport:output_type -> service.NewBlockReportReply
	12, // 48: service.NameNodeService.GetSystemInfo:output_type -> service.GetSystemInfoReply
	14, // 49: service.NameNodeService.PutFile:output_type -> service.PutFileReply
	16, // 50: service.NameNodeService.PutBlock:output_type -> service.PutBlockReply
	18, // 51: service.NameNodeService.Mkdir:output_type -> service.MkdirReply
	20, // 52: service.NameNodeService.List:output_type -> service.ListReply
	22, // 53: service.NameNodeService.Rename:output_type -> service.RenameReply
	24, // 54: service.NameNodeService.Delete:output_type -> service.DeleteReply
	26, // 55: service.NameNodeService.Stat:output_type -> service.StatReply
	28, // 56: service.NameNodeService.GetLease:output_type -> service.GetLeaseReply
	30, // 57: service.NameNodeService.RenewLease:output_type -> service.RenewLeaseReply
	32, // 58: service.NameNodeService.ReleaseLease:output_type -> service.ReleaseLeaseReply
	44, // [44:59] is the sub-list for method output_type
	29, // [29:44] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_namenode_proto_init() }
func file_namenode_proto_init() {
	if File_namenode_proto != nil {
		return
	}
	file_statuscode_proto_init()
	file_block_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_namenode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimDataNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReportArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockReportArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemInfoArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutFileArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutFileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutBlockArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutBlockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MkdirReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaseArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewLeaseArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewLeaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseLeaseArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_namenode_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseLeaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_namenode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_namenode_proto_goTypes,
		DependencyIndexes: file_namenode_proto_depIdxs,
		MessageInfos:      file_namenode_proto_msgTypes,
	}.Build()
	File_namenode_proto = out.File
	file_namenode_proto_rawDesc = nil
	file_namenode_proto_goTypes = nil
	file_namenode_proto_depIdxs = nil
}
