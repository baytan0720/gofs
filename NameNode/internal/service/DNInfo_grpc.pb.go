// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: DNInfo.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DNInfoServiceClient is the client API for DNInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNInfoServiceClient interface {
	DNInfo(ctx context.Context, in *DNInfoArgs, opts ...grpc.CallOption) (*DNInfoReply, error)
}

type dNInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDNInfoServiceClient(cc grpc.ClientConnInterface) DNInfoServiceClient {
	return &dNInfoServiceClient{cc}
}

func (c *dNInfoServiceClient) DNInfo(ctx context.Context, in *DNInfoArgs, opts ...grpc.CallOption) (*DNInfoReply, error) {
	out := new(DNInfoReply)
	err := c.cc.Invoke(ctx, "/pb.DNInfoService/DNInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNInfoServiceServer is the server API for DNInfoService service.
// All implementations must embed UnimplementedDNInfoServiceServer
// for forward compatibility
type DNInfoServiceServer interface {
	DNInfo(context.Context, *DNInfoArgs) (*DNInfoReply, error)
	mustEmbedUnimplementedDNInfoServiceServer()
}

// UnimplementedDNInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDNInfoServiceServer struct {
}

func (UnimplementedDNInfoServiceServer) DNInfo(context.Context, *DNInfoArgs) (*DNInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DNInfo not implemented")
}
func (UnimplementedDNInfoServiceServer) mustEmbedUnimplementedDNInfoServiceServer() {}

// UnsafeDNInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNInfoServiceServer will
// result in compilation errors.
type UnsafeDNInfoServiceServer interface {
	mustEmbedUnimplementedDNInfoServiceServer()
}

func RegisterDNInfoServiceServer(s grpc.ServiceRegistrar, srv DNInfoServiceServer) {
	s.RegisterService(&DNInfoService_ServiceDesc, srv)
}

func _DNInfoService_DNInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNInfoServiceServer).DNInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DNInfoService/DNInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNInfoServiceServer).DNInfo(ctx, req.(*DNInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// DNInfoService_ServiceDesc is the grpc.ServiceDesc for DNInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DNInfoService",
	HandlerType: (*DNInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DNInfo",
			Handler:    _DNInfoService_DNInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DNInfo.proto",
}
