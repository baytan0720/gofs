// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: PutFile.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PutFileServiceClient is the client API for PutFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PutFileServiceClient interface {
	PutFile(ctx context.Context, in *PutFileArgs, opts ...grpc.CallOption) (*PutFileReply, error)
}

type putFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPutFileServiceClient(cc grpc.ClientConnInterface) PutFileServiceClient {
	return &putFileServiceClient{cc}
}

func (c *putFileServiceClient) PutFile(ctx context.Context, in *PutFileArgs, opts ...grpc.CallOption) (*PutFileReply, error) {
	out := new(PutFileReply)
	err := c.cc.Invoke(ctx, "/pb.PutFileService/PutFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PutFileServiceServer is the server API for PutFileService service.
// All implementations must embed UnimplementedPutFileServiceServer
// for forward compatibility
type PutFileServiceServer interface {
	PutFile(context.Context, *PutFileArgs) (*PutFileReply, error)
	mustEmbedUnimplementedPutFileServiceServer()
}

// UnimplementedPutFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPutFileServiceServer struct {
}

func (UnimplementedPutFileServiceServer) PutFile(context.Context, *PutFileArgs) (*PutFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedPutFileServiceServer) mustEmbedUnimplementedPutFileServiceServer() {}

// UnsafePutFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PutFileServiceServer will
// result in compilation errors.
type UnsafePutFileServiceServer interface {
	mustEmbedUnimplementedPutFileServiceServer()
}

func RegisterPutFileServiceServer(s grpc.ServiceRegistrar, srv PutFileServiceServer) {
	s.RegisterService(&PutFileService_ServiceDesc, srv)
}

func _PutFileService_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PutFileServiceServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PutFileService/PutFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PutFileServiceServer).PutFile(ctx, req.(*PutFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// PutFileService_ServiceDesc is the grpc.ServiceDesc for PutFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PutFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PutFileService",
	HandlerType: (*PutFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutFile",
			Handler:    _PutFileService_PutFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PutFile.proto",
}
