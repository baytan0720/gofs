// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: Blockreport.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockreportServiceClient is the client API for BlockreportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockreportServiceClient interface {
	Blockreport(ctx context.Context, in *BlockreportArgs, opts ...grpc.CallOption) (*BlockreportReply, error)
}

type blockreportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockreportServiceClient(cc grpc.ClientConnInterface) BlockreportServiceClient {
	return &blockreportServiceClient{cc}
}

func (c *blockreportServiceClient) Blockreport(ctx context.Context, in *BlockreportArgs, opts ...grpc.CallOption) (*BlockreportReply, error) {
	out := new(BlockreportReply)
	err := c.cc.Invoke(ctx, "/pb.BlockreportService/Blockreport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockreportServiceServer is the server API for BlockreportService service.
// All implementations must embed UnimplementedBlockreportServiceServer
// for forward compatibility
type BlockreportServiceServer interface {
	Blockreport(context.Context, *BlockreportArgs) (*BlockreportReply, error)
	mustEmbedUnimplementedBlockreportServiceServer()
}

// UnimplementedBlockreportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockreportServiceServer struct {
}

func (UnimplementedBlockreportServiceServer) Blockreport(context.Context, *BlockreportArgs) (*BlockreportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blockreport not implemented")
}
func (UnimplementedBlockreportServiceServer) mustEmbedUnimplementedBlockreportServiceServer() {}

// UnsafeBlockreportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockreportServiceServer will
// result in compilation errors.
type UnsafeBlockreportServiceServer interface {
	mustEmbedUnimplementedBlockreportServiceServer()
}

func RegisterBlockreportServiceServer(s grpc.ServiceRegistrar, srv BlockreportServiceServer) {
	s.RegisterService(&BlockreportService_ServiceDesc, srv)
}

func _BlockreportService_Blockreport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockreportArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockreportServiceServer).Blockreport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockreportService/Blockreport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockreportServiceServer).Blockreport(ctx, req.(*BlockreportArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockreportService_ServiceDesc is the grpc.ServiceDesc for BlockreportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockreportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BlockreportService",
	HandlerType: (*BlockreportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Blockreport",
			Handler:    _BlockreportService_Blockreport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Blockreport.proto",
}
